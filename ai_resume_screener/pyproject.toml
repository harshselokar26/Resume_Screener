[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-resume-screener"
version = "1.0.0"
description = "AI-powered resume screening and job matching system using NLP"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "ai", "resume", "screening", "nlp", "machine-learning", 
    "job-matching", "fastapi", "spacy", "recruitment"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Human Resources",
    "Topic :: Text Processing :: Linguistic",
    "Framework :: FastAPI",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "spacy>=3.7.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.25.0",
    "pandas>=2.1.0",
    "PyMuPDF>=1.23.0",
    "python-docx>=1.1.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.0",
    "httpx>=0.25.0",
    "python-dotenv>=1.0.0",
    "jinja2>=3.1.0",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "sqlalchemy>=2.0.0",
    "redis>=5.0.0",
    "gunicorn>=21.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.5.0",
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-swagger-ui-tag>=0.6.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "structlog>=23.2.0",
]
ml = [
    "tensorflow>=2.15.0",
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "sentence-transformers>=2.2.0",
]

[project.urls]
Homepage = "https://github.com/your-org/ai-resume-screener"
Documentation = "https://ai-resume-screener.readthedocs.io"
Repository = "https://github.com/your-org/ai-resume-screener.git"
"Bug Tracker" = "https://github.com/your-org/ai-resume-screener/issues"
Changelog = "https://github.com/your-org/ai-resume-screener/blob/main/CHANGELOG.md"

[project.scripts]
resume-screener = "app.main:main"
download-models = "scripts.download_models:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "scripts*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
app = ["templates/*", "static/*"]
data = ["*.json", "sample_data/*"]

# ===== BLACK CONFIGURATION =====
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# ===== ISORT CONFIGURATION =====
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "tests"]
known_third_party = ["fastapi", "pydantic", "spacy", "sklearn"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ===== MYPY CONFIGURATION =====
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "spacy.*",
    "sklearn.*",
    "fitz.*",
    "docx.*",
    "pdfminer.*",
]
ignore_missing_imports = true

# ===== PYTEST CONFIGURATION =====
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "nlp: marks tests that require NLP models",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ===== COVERAGE CONFIGURATION =====
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/alembic/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# ===== BANDIT CONFIGURATION =====
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# ===== FLAKE8 CONFIGURATION =====
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

# ===== SEMANTIC RELEASE CONFIGURATION =====
[tool.semantic_release]
version_toml = "pyproject.toml:project.version"
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
remove_dist = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
